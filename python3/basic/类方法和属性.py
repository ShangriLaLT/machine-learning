# 属性分为类属性和实类属性
# 方法分为普通方法，类方法，静态方法


class A(object):
    # 类属性通过A.a来调用，类属性所有的类都相同从而节约内存空间。
    a = "类方法"
    # 一个下划线私有方法告诉别人该属性或方法属于私有方法不建议调用
    _b = "私有方法"

    # 双下划线私有方法外部无法调用因为编译后会变成 _classname__propertyname
    __e = "外部无法访问的属性"

    def __init__(self):
        # 实类属性在每次初始化的时候都可以修改。
        self.c = "实类属性"
        self._d = "实类私有属性"

    # 普通方法 外部用实类调用
    def print1(self):
        print("普通方法")

    # 类方法 只能访问类属性，不能访问实类属性，可以通过类或者实类调用
    @classmethod
    def print2(cls):
        print("类方法")

    # 静态方法 可以通过类或者实类调用,与类有关但是不依赖类的属性和方法。
    @staticmethod
    def print3():
        print("静态方法")


"""
总结：类属性与类方法是类固有的方法与属性，不会因为实例不同而改变，写他们的目的是减少多实例时所创造出来的内存空间，加快运行速度。

"""
